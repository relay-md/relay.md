{% extends 'layout.html' %} {% block title %}{{ name }} {% endblock %}
{% block content %}
.mt-5.mb-5
 .columns
  .column.is-8.is-offset-2
   h1.title.is-1 Relay News

   {% for new in news %}
   .card.block
    .card-header
     .card-header-title {{new.title}}
    .card-content
     div(data-document="{{new.id}}").document-body
      progress.progress.is-small.is-dark(max="100") 15%
    .card-footer.is-small
     // TODO: make this look nicer
     .card-footer-item published {{new.created_at.strftime("%Y/%m/%d")}}
     .
   {% endfor %}
{% endblock %}

{% block javascript %}
script(src="https://cdnjs.cloudflare.com/ajax/libs/showdown/2.1.0/showdown.min.js" integrity="sha512-LhccdVNGe2QMEfI3x4DVV3ckMRe36TfydKss6mJpdHjNFiV07dFpS2xzeZedptKZrwxfICJpez09iNioiSZ3hA==" crossorigin="anonymous" referrerpolicy="no-referrer")
script(src="https://cdnjs.cloudflare.com/ajax/libs/js-yaml/4.1.0/js-yaml.min.js" integrity="sha512-CSBhVREyzHAjAFfBlIBakjoRUKp5h7VSweP0InR/pAJyptH7peuhCsqAI/snV+TwZmXZqoUklpXp6R6wMnYf5Q==" crossorigin="anonymous" referrerpolicy="no-referrer")
script
.
 async function get_document(id) {
   let base_url = "https://api.relay.md/v1/doc/";
   // For development purpose only:
   //base_url = "http://localhost:5001/v1/doc/";
   const response = await fetch(base_url + id, {
     method: "GET",
     headers: {
   "Content-Type": "text/markdown",
   "X-API-Key": "{{access_token}}"
     }
   });
   if (!response.ok) {
     throw new Error(response.statusText);
   }

   if (response.headers.get("content-type") == "application/json") {
     res = await response.json();
     throw Error(res.error.message);
   }
   return await response.text();
 }
 documents = document.querySelectorAll('[data-document]');
 documents.forEach(dom_doc => {
  var id = dom_doc.dataset.document;
  get_document(id)
    .then((doc) => {
      var FRONTMATTER_EXPR = /---\n(.*)?\n---/s
      var body = doc.replace(FRONTMATTER_EXPR, "");
      var frontmatter = doc.match(FRONTMATTER_EXPR);
      var metadata = jsyaml.load(frontmatter[1]);
      showdown.extension('codehighlight', function() {
            function htmlunencode(text) {
              return (
                text
                  .replace(/&amp;/g, '&')
                  .replace(/&lt;/g, '<')
                  .replace(/&gt;/g, '>')
                );
            }
            return [
              {
                type: 'output',
                filter: function (text, converter, options) {
                  // use new shodown's regexp engine to conditionally parse codeblocks
                  var left  = '<pre><code\\b[^>]*>',
                      right = '</code></pre>',
                      flags = 'g',
                      replacement = function (wholematch, match, left, right) {
                        // unescape match to prevent double escaping
                        match = htmlunencode(match);
                        return '<pre class="hljs"><code>' + hljs.highlightAuto(match).value + right;
                      };
                  return showdown.helper.replaceRecursiveRegExp(text, replacement, left, right, flags);
                }
              }
            ];
          });
      var converter = new showdown.Converter({
        "extensions": ["codehighlight"]
      });
      var html = converter.makeHtml(body);
      dom_doc.innerHTML = html;
    });
 });
{% endblock %}
